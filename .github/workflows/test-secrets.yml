# Workflow: Test Sécurité Secrets
# Description: Ce workflow démontre les bonnes pratiques de gestion des secrets dans GitHub Actions
# Il montre comment utiliser les secrets de manière sécurisée sans les exposer dans les logs

name: Test Sécurité Secrets

# Déclenchement manuel uniquement pour plus de sécurité
# workflow_dispatch permet un déclenchement manuel depuis l'interface GitHub
# Ceci évite l'exécution automatique qui pourrait exposer des secrets
on: [workflow_dispatch]

# Définition des jobs à exécuter
jobs:
  # Job: Démonstration d'utilisation sécurisée des secrets
  # Objectif: Montrer comment manipuler les secrets sans les logger
  utilisation-securisee:
    # Environnement d'exécution sécurisé
    runs-on: ubuntu-latest
    
    # Étapes du job
    steps:
    # Étape: Démonstration des bonnes pratiques pour les secrets
    - name: Bonne pratique
      run: |
        # NE JAMAIS faire: echo "Secret: $SECRET_DEMO" - cela exposerait le secret dans les logs
        # Bonne pratique: Utiliser le secret sans l'afficher directement
        
        # Message de confirmation sans révéler le contenu du secret
        echo "Secret configuré avec succès"
        
        # Afficher uniquement la longueur pour vérification, pas le contenu
        # Ceci est utile pour debugger sans compromettre la sécurité
        echo "Longueur du secret: ${#SECRET_DEMO} caractères"
        
        # Exemple d'utilisation sécurisée dans un script:
        # if [ ${#SECRET_DEMO} -eq 0 ]; then
        #   echo "Erreur: Secret non configuré"
        #   exit 1
        # fi
      env:
        # Définition de la variable d'environnement à partir du secret GitHub
        # IMPORTANT: Le secret doit être configuré dans les paramètres du repository/organisation
        # Bonne pratique: Utiliser des noms significatifs pour les variables d'environnement
        SECRET_DEMO: ${{ secrets.SECRET_DEMO }}

# Bonnes pratiques supplémentaires recommandées:
# 1. Utiliser des secrets d'environnement pour les environnements de production
# 2. Limiter les permissions du token GitHub (GITHUB_TOKEN)
# 3. Auditer régulièrement l'utilisation des secrets
# 4. Utiliser GitHub Actions OIDC pour éviter de stocker des secrets cloud
# 5. Rotation régulière des secrets
# 6. Ne jamais hardcoder des secrets dans le code du workflow
